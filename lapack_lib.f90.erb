<%-
   require 'lapack_lib_util'
-%>

#include "lapack_lib.h"
module lapack_lib
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
   USE_LAPACK_LIB_H
   use, intrinsic:: iso_fortran_env, only: INPUT_UNIT, OUTPUT_UNIT, ERROR_UNIT
   use, non_intrinsic:: lapack_constant_lib, only: SIZE_KIND, ONE
   use, non_intrinsic:: lapack_interface_lib, only: sgemm, dgemm, cgemm, zgemm
   use, non_intrinsic:: lapack_interface_lib, only: sgemv, dgemv, cgemv, zgemv
   use, non_intrinsic:: lapack_interface_lib, only: sdot, ddot, cdotc, zdotc

   implicit none


   private
   ! If you use LAPACK/BLAS with `ilp64` without `-fdefault-integer-8`, you should set `SIZE_KIND = INT64`
   public:: SIZE_KIND
   public:: ONE
   public:: mul, mul_


   type:: Trans
   end type Trans

   type, extends(Trans):: TransN
   end type TransN

   type, extends(Trans):: TransT
   end type TransT

   type, extends(Trans):: TransC
   end type TransC


   type(TransN), parameter, public:: TR_N = TransN()
   type(TransT), parameter, public:: TR_T = TransT()
   type(TransC), parameter, public:: TR_C = TransC()


   <%- (TYPES - (T2S_U2S + T2S_U1S + T1S_U2S)).each{|a, b| -%>
      interface mul
         module procedure mul<%= a %><%= b %>
      end interface mul

      interface mul_
         module procedure mul_<%= a %><%= b %>
      end interface mul_
   <%- } -%>

   <%- (T2S_U1S_NTCS + T1S_U2S_NTCS).each{|a, b, ntcs| -%>
      interface mul
         module procedure mul<%= a %><%= b %>
      end interface mul

      interface mul_
         module procedure mul_<%= a %><%= b %>
      end interface mul_

      <%- ntcs.each{|ntc| -%>
         interface mul
            module procedure mul<%= a %><%= b %><%= ntc %>
         end interface mul

         interface mul_
            module procedure mul_<%= a %><%= b %><%= ntc %>
         end interface mul_
      <%- } -%>
   <%- } -%>

   <%- T2S_U2S_NTCS.each{|a, b, ntcs| -%>
      interface mul
         module procedure mul<%= a %><%= b %>
      end interface mul

      interface mul_
         module procedure mul_<%= a %><%= b %>
      end interface mul_

      <%- ntcs.each{|ntca, ntcb| -%>
         interface mul
            module procedure mul<%= a %><%= b %><%= ntca %><%= ntcb %>
         end interface mul

         interface mul_
            module procedure mul_<%= a %><%= b %><%= ntca %><%= ntcb %>
         end interface mul_
      <%- } -%>
   <%- } -%>


   interface str
      module procedure str_TransN
      module procedure str_TransT
      module procedure str_TransC
   end interface str


contains


   <%- T2S_U2S_NTCS.each{|a, b, ntcs| -%>
      subroutine mul_<%= a %><%= b %>(a, b, ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare22(a, b, :n, :n) %>, intent(out):: ret

         call mul_(a, b, ret, TR_N, TR_N)
      end subroutine mul_<%= a %><%= b %>

      <%- ntcs.each{|ntca, ntcb| -%>
         subroutine mul_<%= a %><%= b %><%= ntca %><%= ntcb %>(a, b, ret, transa, transb)
            <%= a.declare %>, intent(in):: a
            <%= b.declare %>, intent(in):: b
            <%= declare22(a, b, ntca, ntcb) %>, intent(out):: ret
            type(<%= ntc_type_from_mode(ntca) %>), intent(in):: transa
            type(<%= ntc_type_from_mode(ntcb) %>), intent(in):: transb
            <%= declare_sizes(a, b) %>
            Integer(kind=SIZE_KIND):: m, n, k

            <%= set_sizes(a, b) %>
            <%- ta = a.type; tb = b.type; ka = a.kind; kb = b.kind -%>
            <%- if ta == tb and (ta == :Logical or ta == :Integer) -%>
               ret = matmul(<%= ntc_fn(ntca, 'a') %>, <%= ntc_fn(ntca, 'b') %>)
            <%- elsif ta == tb and ka == kb -%>
               m = size(ret, 1, kind=kind(m))
               n = size(ret, 2, kind=kind(n))
               k = n_a_<%= ntca == :n ? 2 : 1 %>
               ASSERT(k == n_b_<%= ntcb == :n ? 1 : 2 %>)
               <%- if ta == :Real and ka == :REAL32 -%>
                  call sgemm(str(transa), str(transb), m, n, k, real(1, kind=kind(ret)), a, n_a_1, b, n_b_1, real(0, kind=kind(ret)), ret, m)
               <%- elsif ta == :Real and ka == :REAL64 -%>
                  call dgemm(str(transa), str(transb), m, n, k, real(1, kind=kind(ret)), a, n_a_1, b, n_b_1, real(0, kind=kind(ret)), ret, m)
               <%- elsif ta == :Complex and ka == :REAL32 -%>
                  call cgemm(str(transa), str(transb), m, n, k, cmplx(1, kind=kind(ret)), a, n_a_1, b, n_b_1, cmplx(0, kind=kind(ret)), ret, m)
               <%- elsif ta == :Complex and ka == :REAL64 -%>
                  call zgemm(str(transa), str(transb), m, n, k, cmplx(1, kind=kind(ret)), a, n_a_1, b, n_b_1, cmplx(0, kind=kind(ret)), ret, m)
               <%- else -%>
                  ret = matmul(<%= ntc_fn(ntca, 'a') %>, <%= ntc_fn(ntca, 'b') %>)
               <%- end -%>
            <%- else -%>
               <%- t, k = promote(a, b) -%>
               call mul_(<%= converter(t) %>(a, kind=<%= k %>), <%= converter(t) %>(b, kind=<%= k %>), ret, transa, transb)
            <%- end -%>
         end subroutine mul_<%= a %><%= b %><%= ntca %><%= ntcb %>
      <%- } -%>
   <%- } -%>


   <%- T2S_U1S_NTCS.each{|a, b, ntcas| -%>
      subroutine mul_<%= a %><%= b %>(a, b, ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare21(a, b, :n) %>, intent(out):: ret

         call mul_(a, b, ret, TR_N)
      end subroutine mul_<%= a %><%= b %>

      <% ntcas.each{|ntca| %>
         subroutine mul_<%= a %><%= b %><%= ntca %>(a, b, ret, trans)
            <%= a.declare %>, intent(in):: a
            <%= b.declare %>, intent(in):: b
            <%= declare21(a, b, ntca) %>, intent(out):: ret
            type(<%= ntc_type_from_mode(ntca) %>), intent(in):: trans
            <%= declare_sizes(a, b) %>

            <%= set_sizes(a, b) %>
            <%- ta = a.type; tb = b.type; ka = a.kind; kb = b.kind -%>
            <%- if ta == tb and (ta == :Logical or ta == :Integer) -%>
               ret = matmul(<%= ntc_fn(ntca, 'a') %>, b)
            <%- elsif ta == tb and ka == kb -%>
               ASSERT(n_a_<%= ntca == :n ? 2 : 1 %> == n_b_1)
               <%- if ta == :Real and ka == :REAL32 -%>
                  call sgemv(str(trans), n_a_1, n_a_2, real(1, kind=kind(ret)), a, n_a_1, b, ONE, real(0, kind=kind(ret)), ret, ONE)
               <%- elsif ta == :Real and ka == :REAL64 -%>
                  call dgemv(str(trans), n_a_1, n_a_2, real(1, kind=kind(ret)), a, n_a_1, a, ONE, real(0, kind=kind(ret)), ret, ONE)
               <%- elsif ta == :Complex and ka == :REAL32 -%>
                  call cgemv(str(trans), n_a_1, n_a_2, cmplx(1, kind=kind(ret)), a, n_a_1, a, ONE, cmplx(0, kind=kind(ret)), ret, ONE)
               <%- elsif ta == :Complex and ka == :REAL64 -%>
                  call zgemv(str(trans), n_a_1, n_a_2, cmplx(1, kind=kind(ret)), a, n_a_1, a, ONE, cmplx(0, kind=kind(ret)), ret, ONE)
               <%- else -%>
                  ret = matmul(<%= ntc_fn(ntca, 'a') %>, b)
               <%- end -%>
            <%- else -%>
               <%- t, k = promote(a, b) -%>
               call mul_(<%= converter(t) %>(a, kind=<%= k %>), <%= converter(t) %>(b, kind=<%= k %>), ret, trans)
            <%- end -%>
         end subroutine mul_<%= a %><%= b %><%= ntca %>
      <%- } -%>
   <%- } -%>


   <%- T1S_U2S_NTCS.each{|a, b, ntcbs| -%>
      subroutine mul_<%= a %><%= b %>(a, b, ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare12(a, b, :n) %>, intent(out):: ret

         call mul_(a, b, ret, TR_N)
      end subroutine mul_<%= a %><%= b %>

      <%- ntcbs.each{|ntcb| -%>
         subroutine mul_<%= a %><%= b %><%= ntcb %>(a, b, ret, trans)
            <%= a.declare %>, intent(in):: a
            <%= b.declare %>, intent(in):: b
            <%= declare12(a, b, ntcb) %>, intent(out):: ret
            type(<%= ntc_type_from_mode(ntcb) %>), intent(in):: trans

            <%- if ntcb == :n -%>
               call mul_(b, a, ret, TR_T)
            <%- elsif ntcb == :t -%>
               call mul_(b, a, ret, TR_N)
            <%- elsif ntcb == :c -%>
               call mul_(conjg(b), a, ret, TR_N)
            <%- else -%>
               unsupported ntcb: <%= ntcb %>
            <%- end -%>
         end subroutine mul_<%= a %><%= b %><%= ntcb %>
      <%- } -%>
   <%- } -%>


   <%- (NUM1S_NUM1S + LOGICAL1S_LOGICAL1S).each{|a, b| -%>
      subroutine mul_<%= a %><%= b %>(a, b, ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare_sizes(a, b) %>
         <%= declare(a, b) %>, intent(out):: ret

         <%= set_sizes(a, b) %>
         <%- ta = a.type; tb = b.type; ka = a.kind; kb = b.kind -%>
         <%- if ta == tb and (ta == :Logical or ta == :Integer) -%>
            ret = dot_product(a, b)
         <%- elsif ta == tb and ka == kb -%>
            <%- if ta == :Real and ka == :REAL32 -%>
               ASSERT(n_a_1 == n_b_1)
               ret = sdot(n_a_1, a, ONE, b, ONE)
            <%- elsif ta == :Real and ka == :REAL64 -%>
               ASSERT(n_a_1 == n_b_1)
               ret = ddot(n_a_1, a, ONE, b, ONE)
            <%- elsif ta == :Complex and ka == :REAL32 -%>
               ASSERT(n_a_1 == n_b_1)
               ret = cdotc(n_a_1, a, ONE, b, ONE)
            <%- elsif ta == :Complex and ka == :REAL64 -%>
               ASSERT(n_a_1 == n_b_1)
               ret = zdotc(n_a_1, a, ONE, b, ONE)
            <%- else -%>
               ret = dot_product(a, b)
            <%- end -%>
         <%- else -%>
            <%- t, k = promote(a, b) -%>
            call mul_(<%= converter(t) %>(a, kind=<%= k %>), <%= converter(t) %>(b, kind=<%= k %>), ret)
         <%- end -%>
      end subroutine mul_<%= a %><%= b %>
   <%- } -%>

   ! scalar to scalar multiplications and `Logical` multiplications were implemented only for consistency
   ! compiler's implementation of scalar to vector/matrix multiplications might be fine
   ! scalar to vector: `*scal`
   ! scalar to matrix: ?

   <%- (NUM0S_NUM0S + NUM0S_NUM12S + NUM12S_NUM0S).each{|a, b| -%>
      pure subroutine mul_<%= a %><%= b %>(a, b, ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare(a, b) %>, intent(out):: ret
         ret = a*b
      end subroutine mul_<%= a %><%= b %>
   <%- } -%>


   <%- (LOGICAL0S_LOGICAL0S + LOGICAL0S_LOGICAL12S + LOGICAL12S_LOGICAL0S).each{|a, b| -%>
      pure subroutine mul_<%= a %><%= b %>(a, b, ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare(a, b) %>, intent(out):: ret
         ret = a.and.b
      end subroutine mul_<%= a %><%= b %>
   <%- } -%>


   ! `mul<T><U>`
   <%- T2S_U1S_NTCS.each{|a, b, ntcs| -%>
      function mul<%= a %><%= b %>(a, b) result(ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare21(a, b, :n) %>:: ret

         ret = mul(a, b, TR_N)
      end function mul<%= a %><%= b %>

      <%- ntcs.each{|ntc| -%>
         function mul<%= a %><%= b %><%= ntc %>(a, b, trans) result(ret)
            <%= a.declare %>, intent(in):: a
            <%= b.declare %>, intent(in):: b
            type(<%= ntc_type_from_mode(ntc) %>), intent(in):: trans
            <%= declare21(a, b, ntc) %>:: ret

            call mul_(a, b, ret, trans)
         end function mul<%= a %><%= b %><%= ntc %>
      <%- } -%>
   <%- } -%>

   <%- T1S_U2S_NTCS.each{|a, b, ntcs| -%>
      function mul<%= a %><%= b %>(a, b) result(ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare12(a, b, :n) %>:: ret

         ret = mul(a, b, TR_N)
      end function mul<%= a %><%= b %>

      <%- ntcs.each{|ntc| -%>
         function mul<%= a %><%= b %><%= ntc %>(a, b, trans) result(ret)
            <%= a.declare %>, intent(in):: a
            <%= b.declare %>, intent(in):: b
            type(<%= ntc_type_from_mode(ntc) %>), intent(in):: trans
            <%= declare12(a, b, ntc) %>:: ret

            call mul_(a, b, ret, trans)
         end function mul<%= a %><%= b %><%= ntc %>
      <%- } -%>
   <%- } -%>

   <%- T2S_U2S_NTCS.each{|a, b, ntcs| -%>
      function mul<%= a %><%= b %>(a, b) result(ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare22(a, b, :n, :n) %>:: ret

         ret = mul(a, b, TR_N, TR_N)
      end function mul<%= a %><%= b %>

      <% ntcs.each{|ntca, ntcb| %>
         function mul<%= a %><%= b %><%= ntca %><%= ntcb %>(a, b, transa, transb) result(ret)
            <%= a.declare %>, intent(in):: a
            <%= b.declare %>, intent(in):: b
            type(<%= ntc_type_from_mode(ntca) %>), intent(in):: transa
            type(<%= ntc_type_from_mode(ntcb) %>), intent(in):: transb
            <%= declare22(a, b, ntca, ntcb) %>:: ret

            call mul_(a, b, ret, transa, transb)
         end function mul<%= a %><%= b %><%= ntca %><%= ntcb %>
      <% } %>
   <%- } -%>

   <%- (TYPES - (T1S_U2S + T2S_U1S + T2S_U2S)).each{|a, b| -%>
      function mul<%= a %><%= b %>(a, b) result(ret)
         <%= a.declare %>, intent(in):: a
         <%= b.declare %>, intent(in):: b
         <%= declare(a, b) %>:: ret

         call mul_(a, b, ret)
      end function mul<%= a %><%= b %>
   <%- } -%>


   function str_TransN(t) result(ret)
      type(TransN), intent(in):: t
      Character(len=1):: ret

      ret = 'n'
   end function str_TransN

   function str_TransT(t) result(ret)
      type(TransT), intent(in):: t
      Character(len=1):: ret

      ret = 't'
   end function str_TransT

   function str_TransC(t) result(ret)
      type(TransC), intent(in):: t
      Character(len=1):: ret

      ret = 'c'
   end function str_TransC
end module lapack_lib
